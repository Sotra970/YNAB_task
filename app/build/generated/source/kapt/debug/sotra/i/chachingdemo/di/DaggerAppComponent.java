// Generated by Dagger (https://google.github.io/dagger).
package sotra.i.chachingdemo.di;

import android.app.Activity;
import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import sotra.io.digistask.util.ViewModelFactory;
import sotra.io.digistask.util.ViewModelFactory_Factory;
import sotra.ynab.ApplicationC;
import sotra.ynab.ApplicationC_MembersInjector;
import sotra.ynab.MainActivity;
import sotra.ynab.MainActivity_MembersInjector;
import sotra.ynab.api.ApiService;
import sotra.ynab.di.modules.AppModule;
import sotra.ynab.di.modules.AppModule_ProvideApiServiceFactory;
import sotra.ynab.di.modules.FragmentBuildersModule_ContributeAccountFragment;
import sotra.ynab.di.modules.FragmentBuildersModule_ContributeBudgetFragment;
import sotra.ynab.di.modules.FragmentBuildersModule_ContributeTransactionsFragment;
import sotra.ynab.di.modules.MainActivityModule_ContributeMainActivity;
import sotra.ynab.repo.NetworkRepo;
import sotra.ynab.repo.NetworkRepo_Factory;
import sotra.ynab.ui.accountsFragment.AccountFragment;
import sotra.ynab.ui.accountsFragment.AccountFragment_MembersInjector;
import sotra.ynab.ui.accountsFragment.AccountViewModel;
import sotra.ynab.ui.accountsFragment.AccountViewModel_Factory;
import sotra.ynab.ui.budgetFragment.BudgetFragment;
import sotra.ynab.ui.budgetFragment.BudgetFragment_MembersInjector;
import sotra.ynab.ui.budgetFragment.BudgetViewModel;
import sotra.ynab.ui.budgetFragment.BudgetViewModel_Factory;
import sotra.ynab.ui.transactions.TransactionsFragment;
import sotra.ynab.ui.transactions.TransactionsFragment_MembersInjector;
import sotra.ynab.ui.transactions.TransactionsViewModel;
import sotra.ynab.ui.transactions.TransactionsViewModel_Factory;

public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private NetworkRepo_Factory networkRepoProvider;

  private BudgetViewModel_Factory budgetViewModelProvider;

  private AccountViewModel_Factory accountViewModelProvider;

  private TransactionsViewModel_Factory transactionsViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {

    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideApiServiceProvider =
        DoubleCheck.provider(AppModule_ProvideApiServiceFactory.create(builder.appModule));
    this.networkRepoProvider = NetworkRepo_Factory.create(provideApiServiceProvider);
    this.budgetViewModelProvider = BudgetViewModel_Factory.create(networkRepoProvider);
    this.accountViewModelProvider = AccountViewModel_Factory.create(networkRepoProvider);
    this.transactionsViewModelProvider = TransactionsViewModel_Factory.create(networkRepoProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3)
            .put(BudgetViewModel.class, (Provider) budgetViewModelProvider)
            .put(AccountViewModel.class, (Provider) accountViewModelProvider)
            .put(TransactionsViewModel.class, (Provider) transactionsViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(ApplicationC application) {
    injectApplicationC(application);
  }

  private ApplicationC injectApplicationC(ApplicationC instance) {
    ApplicationC_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, MainActivity.class);
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeBudgetFragment.BudgetFragmentSubcomponent.Builder>
        budgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeAccountFragment.AccountFragmentSubcomponent.Builder>
        accountFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeTransactionsFragment.TransactionsFragmentSubcomponent
                .Builder>
        transactionsFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {

      initialize(builder);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4)
          .put(
              MainActivity.class,
              (Provider) DaggerAppComponent.this.mainActivitySubcomponentBuilderProvider)
          .put(BudgetFragment.class, (Provider) budgetFragmentSubcomponentBuilderProvider)
          .put(AccountFragment.class, (Provider) accountFragmentSubcomponentBuilderProvider)
          .put(
              TransactionsFragment.class,
              (Provider) transactionsFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private NetworkRepo getNetworkRepo() {
      return new NetworkRepo(DaggerAppComponent.this.provideApiServiceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.budgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeBudgetFragment.BudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeBudgetFragment.BudgetFragmentSubcomponent
                    .Builder
                get() {
              return new BudgetFragmentSubcomponentBuilder();
            }
          };
      this.accountFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAccountFragment.AccountFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAccountFragment.AccountFragmentSubcomponent
                    .Builder
                get() {
              return new AccountFragmentSubcomponentBuilder();
            }
          };
      this.transactionsFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeTransactionsFragment.TransactionsFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeTransactionsFragment
                    .TransactionsFragmentSubcomponent.Builder
                get() {
              return new TransactionsFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectNetwork(instance, getNetworkRepo());
      return instance;
    }

    private final class BudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeBudgetFragment.BudgetFragmentSubcomponent.Builder {
      private BudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeBudgetFragment.BudgetFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, BudgetFragment.class);
        return new BudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(BudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class BudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeBudgetFragment.BudgetFragmentSubcomponent {
      private BudgetFragmentSubcomponentImpl(BudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(BudgetFragment arg0) {
        injectBudgetFragment(arg0);
      }

      private BudgetFragment injectBudgetFragment(BudgetFragment instance) {
        BudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AccountFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAccountFragment.AccountFragmentSubcomponent
            .Builder {
      private AccountFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAccountFragment.AccountFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, AccountFragment.class);
        return new AccountFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AccountFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AccountFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAccountFragment.AccountFragmentSubcomponent {
      private AccountFragmentSubcomponentImpl(AccountFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AccountFragment arg0) {
        injectAccountFragment(arg0);
      }

      private AccountFragment injectAccountFragment(AccountFragment instance) {
        AccountFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class TransactionsFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeTransactionsFragment
            .TransactionsFragmentSubcomponent.Builder {
      private TransactionsFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeTransactionsFragment.TransactionsFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, TransactionsFragment.class);
        return new TransactionsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TransactionsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TransactionsFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeTransactionsFragment
            .TransactionsFragmentSubcomponent {
      private TransactionsFragmentSubcomponentImpl(
          TransactionsFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(TransactionsFragment arg0) {
        injectTransactionsFragment(arg0);
      }

      private TransactionsFragment injectTransactionsFragment(TransactionsFragment instance) {
        TransactionsFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }
}
